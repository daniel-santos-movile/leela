#!/bin/sh

leela_root=${leela_root:-$(pwd)}
bin_sed=${bin_sed:-/bin/sed}

major=$1
minor=$2
build=$3

. src/scripts/read-version.sh

print_usage () {
  echo "[usage] version.sh MAJOR MINOR BUILD"
}

update_version () {
  local name
  name=$(basename $1)
  echo " updating file: $1"
  [ "$name" = project.clj     ] && $bin_sed -i '/^(defproject blackbox/c\(defproject blackbox "'$version'"' $1
  [ "$name" = warpdrive.cabal ] && $bin_sed -i -r 's/^version:( *).*/version:\1'$version'/' $1
  [ "$name" = setup.py        ] && $bin_sed -i -r 's/^( *)version( *)= *".*"(.*)/\1version\2= "'$version'"\3/' $1
}

write_c_hversion () {
  echo " creating file: $1"
  cat <<EOF >"$1"
// Copyright 2014 (c) Diego Souza <dsouza@c0d3.xxx>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// [DO NOT EDIT, AUTOMATICALLY GENERATED BY ($0 $@)]

#ifndef __leela_version__
#define __leela_version__

extern int LEELA_MAJOR;
extern int LEELA_MINOR;
extern int LEELA_BUILD;

extern const char * LEELA_VERSION;

#endif

EOF
}

write_c_cversion () {
  echo " creating file: $1"
  cat <<EOF >"$1"
// Copyright 2014 (c) Diego Souza <dsouza@c0d3.xxx>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// [DO NOT EDIT, AUTOMATICALLY GENERATED BY ($0 $@)]

#include "leela/version.h"

int LEELA_MAJOR = $major;
int LEELA_MINOR = $minor;
int LEELA_BUILD = $build;

const char * LEELA_VERSION = "$major.$minor.$build";

EOF
}

write_hsversion () {
  echo " creating file: $1"
  cat <<EOF >"$1"
-- Copyright 2014 (c) Diego Souza <dsouza@c0d3.xxx>
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--
-- [DO NOT EDIT, AUTOMATICALLY GENERATED BY ($0 $@)]

module Leela.Version where

major   = "$major"
minor   = "$minor"
build   = "$build"
version = "$major.$minor.$build"

EOF
}

write_clversion () {
  echo " creating file: $1"
  cat <<EOF >"$1"
;; Copyright 2014 (c) Diego Souza <dsouza@c0d3.xxx>
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;; [DO NOT EDIT, AUTOMATICALLY GENERATED BY ($0 $@)]

(ns leela.version)

(def major "$major")

(def minor "$minor")

(def build "$build")

(def version "$major.$minor.$build")

EOF
}

read_version
check_environ
echo "version: $version"
write_c_hversion $leela_root/src/c/src/leela/version.h
write_c_cversion $leela_root/src/c/src/leela/version.c
write_hsversion $leela_root/src/warpdrive/src/Leela/Version.hs
write_clversion $leela_root/src/blackbox/src/leela/version.clj
update_version $leela_root/src/blackbox/project.clj
update_version $leela_root/src/warpdrive/warpdrive.cabal
update_version $leela_root/src/python/setup.py
