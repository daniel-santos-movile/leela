#!/usr/bin/python
#
# Copyright 2012 Juliano Martinez
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
# @author: Juliano Martinez

from gevent import monkey
monkey.patch_all()

import os
import pwd
import sys
import json
import syslog
import getopt
import pycassa
import ConfigParser
from supay import Daemon
from leela import lasergun
from datetime import datetime
from optparse import OptionParser
from bottle import route, run, request, ServerAdapter
from bottle import abort, default_app, post, delete, debug, get, static_file

syslog.openlog(sys.argv[0].split('/')[-1], syslog.LOG_PID, syslog.LOG_DAEMON)
config = ConfigParser.RawConfigParser()
config_file = '/etc/leela/leela.conf' if os.path.isfile('/etc/leela/leela.conf') else os.getenv('LEELA_CONF')
config.read(config_file)
cassandra = config.get('cassandra','server')

@get('/%s/<hostname>/<service>/<date>' % config.get('web','chart_endpoint'))
def generate_chart(hostname, service, date):
    try:
        syslog.syslog("Received connection looking for leela/read")
        if not hostname:
            syslog.syslog("No hostname given")
            abort(404, 'No hostname given')

        pool = pycassa.ConnectionPool('leela', server_list=[cassandra])
        client = pycassa.ColumnFamily(pool, '%s_%s_%s' % (hostname, service.capitalize(), date))
        series = {}
        for _, data in client.get_range(column_count=1000):
            for name, value in data.iteritems():
                name, ts = name.split('||')
                if not series.has_key(name):
                    series[name] = []
                series[name].append([datetime.utcfromtimestamp(float(ts)), value])

        return """%s""" % lasergun.render_template(
            "/usr/share/leela/templates/line-irregular.tmpl",
            service,
            hostname,
            series
        )

    except Exception, e:
        syslog.syslog("Error: %s" % e.__str__())
        print("Error: %s" % e.__str__())
        abort(500, json.dumps(e.__str__()))
    abort(404, '%s not found' % hostname)


@get('/%s/<hostname>/<service>/<date>' % config.get('web','json_endpoint'))
def generate_json(hostname, service, date):
    try:
        syslog.syslog("Received connection looking for leela/read")
        if not hostname:
            syslog.syslog("No hostname given")
            abort(404, 'No hostname given')

        pool = pycassa.ConnectionPool('leela', server_list=[cassandra])
        client = pycassa.ColumnFamily(pool, '%s_%s_%s' % (hostname, service.capitalize(), date))
        series = {}
        for _, data in client.get_range():
            for name, value in data.iteritems():
                name, ts = name.split('||')
                if not name in series:
                    series[name] = []
                series[name].append([float(ts), value])

        return series

    except Exception, e:
        syslog.syslog("Error: %s" % e.__str__())
        print("Error: %s" % e.__str__())
        abort(500, json.dumps(e.__str__()))
    abort(404, '%s not found' % hostname)

@get('/static/<path:path>')
def static(path):
    return static_file(path, root='/usr/share/leela/static/')


class GEventServerAdapter(ServerAdapter):
    def run(self, handler):
        from gevent.wsgi import WSGIServer
        WSGIServer((self.host, self.port), handler).serve_forever()

def main(username, port):
    os.setuid(pwd.getpwnam(username)[2])
    syslog.syslog("Starting leelad service using port %s" % port)
    run(host = config.get('web','address'),
        port = port or config.get('web','port'),
        server = GEventServerAdapter)
    debug(True)

if __name__ == '__main__':
    try:
        opts, args = getopt.getopt(sys.argv[1:], "a:u:p:", ["action=","username=","port="])
    except getopt.GetoptError, err:
        print str(err)
        sys.exit(1)

    port = None
    action = 'start'
    username = 'leela'
    for o, v in opts:
        if o in ('-a', '--action'):
            action = v
        if o in ('-u', '--username'):
            username = v
        if o in ('-p', '--port'):
            port = v

    if not os.path.isfile(config_file):
        syslog.syslog("Config file %s not found" % config_file)
        sys.exit(1)

    daemon = Daemon(name='leela-web', catch_all_log="/var/log/leela-web.log")
    if action == 'start':
        daemon.start()
        main(username, port)
    elif action == 'status':
        daemon.status()
    elif action == 'stop':
        daemon.stop()
    elif action == 'foreground':
        main(username, port)

