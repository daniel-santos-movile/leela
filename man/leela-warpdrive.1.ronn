-*- mode: markdown; -*-

# leela-warpdrive(1) -- leela zmq frontend #

## SYNOPSIS ##

`warpdrive` [OPTION]...

## DESCRIPTION ##

`warpdrive` is the program that allows users interacting with the
leela system. In conjunction with a few other services, it provides a
_property-graph database_ in which properties can be either
_time-series_ or _key-value_.

This manual provides information about how to use it and its
internals. It does not give information about the lql syntax, but this
can be found at leela-lql(7).

## OPTIONS ##

  * --endpoint=ENDPOINT:

    The enpoint the server binds to;

  * --consul-endpoint=ENDPOINT:

    The consul [HTTP] endpoint to find leela services. This should use
    the consul agent that is monitoring this instance;

  * --debug-level=[DEBUG|INFO|NOTICE|WARNING|ERROR]:

    The logging level. For production consider using NOTICE and above;

  * --redis-secret-env=STRING:

    The _name of the environment variable_ which contais the redis
    secret;

  * --log-bufsize=UINT:

    The size to buffer log messages in memory before flushing to disk;

  * --iothreads=UINT:

    The number of zmq iothreads to use; The generic rule to consider
    is 1Gbp per iothread;

  * --passwd=PATH:

    The passwd file path, which must be a valid json:

        { USERNAME: [ SECRET, [ [LOGIN-AS, PERM-FLAGS] ] ] }

    Where:

      *USERNAME*: string that defines the username;

      *SECRET*: 64 chars long string, hex-encoded;

      *LOGIN-AS*: username this user is allowed to read from or write
       to;

      *PERM-FLAGS*: 4 chars long string that matches the regex:
      `^([r-][w-]){2}$`. The first two characters refers to the graph
      database and the last two to the properties. The `r` means read
      access, the `w` character means write access and the `-` denies
      access;

    Example:

        { "locaweb": [ "0000000000000000000000000000000000000000000000000000000000000000",
                       ["locaweb-test-1", "rw--"],
                       ["locaweb-test-2", "--r-"]
                     ]
        }

## INTERNALS ##

It exposes a network service via `0mq` using the protocol defined in
leela-network-protocol(7), which allows users to retrieve and modify
data using the lql syntax leela-lql(7).

To work properly, this program requires a number of services:

  * blackbox

    the storage service that uses cassandra as the storage
    system. This service must register itself in consul using
    `service=leela` and `tag=blackbox`. Warpdrive is able to auto
    configure itself when new instances are created or removed;

  * redis

    used mostly for caching and to retrieve the last value of a
    time-series property. This service must register itself in consul
    using `service=leela` and `tag=redis`. Similarly, it is also able
    to configure itself when new instances are created or removed;

    Notice that warpdrive requires an read-only redis slave for each
    redis you announce in consul. This slave instance is used for
    expensive commands, like `SCAN`. The slave must be listening for
    requests at the subsequent port of the master
    [i.e. if master port is 6379 then slave port must be 6380].

  * consul

    the naming server which monitors the health of the leela cluster
    and allows to dynamically create or remove nodes. This is a
    critical service;

The following diagram summarizes the architecture:

              +--------+
          +---| consul |
          |   +--------+
          |
    +-----------+        +----------+         +-----------+
    | warpdrive |--------| blackbox |---------| cassandra |
    +-----------+        +----------+         +-----------+
          |
          |                                +--------------+
          +--------------------------------| redis-master |
          |                                +--------------+
          |                                       |
          |                                +--------------+
          +--------------------------------| redis-slave  |
                                           +--------------+

Notice this hides the fact that there are consul agents monitoring
each instance of `warpdrive`, `blackbox`, `redis-master` and
`redis-slave`.

### REQUEST-RESPONSE LIFECYCLE ###

Each request starts with a `BEGIN` message that contains the `lql`
statement to execute. This forks a new thread on the server and
returns a channel to the caller, which must be used to reference this
request afterwards.

The caller then issues a series of `FETCH` requests using this channel
to read data. This shall either return the result of the statement or
an error.

Lastly, the user must issue a `CLOSE` request using the channel to
free any resources associated with the request. More information about
this protocol can be found in leela-lql-protocol(7) and leelq-lql(7).

The server atomically disposes channels that have no activity, i.e.,
no fetch messages.

## BUGS ##

https://github.com/locaweb/leela/issues

## AUTHORS ##

This manual page has been written by dsouza <dsouza@c0d3.xxx>.

## RESOURCES ##

Source code available at http://github.com/locaweb/leela

## COPYING ##

Please refer to COPYING file.
