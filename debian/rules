#!/usr/bin/make -f
# -*- makefile -*-

version      = $(shell src/scripts/read-version.sh)

bin_lein    ?= lein
bin_cabal   ?= cabal
bin_python  ?= python

%:
	dh $@ --with python2

warpdrive-build:
	dh_testdir
	cd src/haskell; { \
          $(bin_cabal) update; \
          $(bin_cabal) sandbox init; \
          $(bin_cabal) install --only-dependencies; \
          $(bin_cabal) configure -O2; \
          $(bin_cabal) build; \
        }

warpdrive-install:
	if ! dpkg -l libzookeeper-mt2 1>/dev/null 2>/dev/null; \
        then \
          mkdir -p debian/tmp/usr/lib; \
          for zk in /usr/lib/libzookeeper*; do \
            cp -a $$zk debian/tmp/usr/lib/ && \
              echo $$zk /usr/lib >> debian/leela-warpdrive.install; \
          done; \
        fi

warpdrive-clean:
	rm -f src/haskell/cabal.sandbox.config
	rm -r -f src/haskell/dist src/haskell/.cabal-sandbox
	sed -i '/^\/usr\/lib\/libzookeeper.*\/usr\/lib/d' debian/leela-warpdrive.install

blackbox-clean:
	rm -r -f src/clojure/target

blackbox-build:
	cd src/clojure; env LEIN_ROOT=ok $(bin_lein) uberjar
	cp -a /usr/lib/libjzmq*.so* src/clojure/target
	cp src/clojure/target/blackbox-$(version)-standalone.jar src/clojure/target/blackbox.jar

clib-build:
	$(MAKE) -C src/c build

clib-clean:
	$(MAKE) -C src/c clean

pylib-build:
	cd src/python; $(bin_python) setup.py build

pylib-clean:
	rm -rf src/python/build

clib-install:
	mkdir -p debian/leela-c/usr/lib
	cp -p src/c/libleela.so* debian/leela-c/usr/lib

pylib-install:
	cd src/python; $(bin_python) setup.py install --install-layout=deb --root=../../debian/leela-python

override_dh_auto_clean: warpdrive-clean blackbox-clean clib-clean
	rm -f debian/*substvars
	rm -rf debian/tmp
	dh_clean

override_dh_install: clib-install pylib-install warpdrive-install
	dh_install

override_dh_installinit:
	dh_installinit --no-start

override_dh_auto_build: warpdrive-build blackbox-build clib-build pylib-build
